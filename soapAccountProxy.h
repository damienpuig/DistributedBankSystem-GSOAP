/* soapAccountProxy.h
   Generated by gSOAP 2.8.11 from service.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapAccountProxy_H
#define soapAccountProxy_H
#include "soapH.h"

class SOAP_CMAC AccountProxy : public soap
{ public:
	/// Endpoint URL of service 'AccountProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	AccountProxy();
	/// Construct from another engine state
	AccountProxy(const struct soap&);
	/// Constructor with endpoint URL
	AccountProxy(const char *url);
	/// Constructor with engine input+output mode control
	AccountProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	AccountProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	AccountProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~AccountProxy();
	/// Initializer used by constructors
	virtual	void AccountProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'add' (returns error code or SOAP_OK)
	virtual	int add(float entry, bool *rresulta) { return this->add(NULL, NULL, entry, rresulta); }
	virtual	int add(const char *endpoint, const char *soap_action, float entry, bool *rresulta);

	/// Web service operation 'remove' (returns error code or SOAP_OK)
	virtual	int remove(float entry, bool *rresultr) { return this->remove(NULL, NULL, entry, rresultr); }
	virtual	int remove(const char *endpoint, const char *soap_action, float entry, bool *rresultr);

	/// Web service operation 'init' (returns error code or SOAP_OK)
	virtual	int init(float balance, char **rresulti) { return this->init(NULL, NULL, balance, rresulti); }
	virtual	int init(const char *endpoint, const char *soap_action, float balance, char **rresulti);

	/// Web service operation 'getbalance' (returns error code or SOAP_OK)
	virtual	int getbalance(char **rresultb) { return this->getbalance(NULL, NULL, rresultb); }
	virtual	int getbalance(const char *endpoint, const char *soap_action, char **rresultb);

	/// Web service operation 'getstatus' (returns error code or SOAP_OK)
	virtual	int getstatus(char **rresultg) { return this->getstatus(NULL, NULL, rresultg); }
	virtual	int getstatus(const char *endpoint, const char *soap_action, char **rresultg);
};
#endif
