/* soapAccountProxy.cpp
   Generated by gSOAP 2.8.11 from service.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapAccountProxy.h"

AccountProxy::AccountProxy()
{	AccountProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

AccountProxy::AccountProxy(const struct soap &_soap) : soap(_soap)
{ }

AccountProxy::AccountProxy(const char *url)
{	AccountProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

AccountProxy::AccountProxy(soap_mode iomode)
{	AccountProxy_init(iomode, iomode);
}

AccountProxy::AccountProxy(const char *url, soap_mode iomode)
{	AccountProxy_init(iomode, iomode);
	soap_endpoint = url;
}

AccountProxy::AccountProxy(soap_mode imode, soap_mode omode)
{	AccountProxy_init(imode, omode);
}

AccountProxy::~AccountProxy()
{ }

void AccountProxy::AccountProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:Account", NULL, NULL},
	{"ns1", "urn:Bank", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void AccountProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void AccountProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	AccountProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void AccountProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *AccountProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *AccountProxy::soap_fault()
{	return this->fault;
}

const char *AccountProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *AccountProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int AccountProxy::soap_close_socket()
{	return soap_closesock(this);
}

int AccountProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void AccountProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void AccountProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *AccountProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int AccountProxy::add(const char *endpoint, const char *soap_action, float entry, bool *rresulta)
{	struct soap *soap = this;
	struct ns__add soap_tmp_ns__add;
	struct ns__addResponse *soap_tmp_ns__addResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap->encodingStyle = "";
	soap_tmp_ns__add.entry = entry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__add(soap, &soap_tmp_ns__add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__add(soap, &soap_tmp_ns__add, "ns:add", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__add(soap, &soap_tmp_ns__add, "ns:add", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rresulta)
		return soap_closesock(soap);
	soap_default_bool(soap, rresulta);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__addResponse = soap_get_ns__addResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (rresulta && soap_tmp_ns__addResponse->rresulta)
		*rresulta = *soap_tmp_ns__addResponse->rresulta;
	return soap_closesock(soap);
}

int AccountProxy::remove(const char *endpoint, const char *soap_action, float entry, bool *rresultr)
{	struct soap *soap = this;
	struct ns__remove soap_tmp_ns__remove;
	struct ns__removeResponse *soap_tmp_ns__removeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap->encodingStyle = "";
	soap_tmp_ns__remove.entry = entry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__remove(soap, &soap_tmp_ns__remove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__remove(soap, &soap_tmp_ns__remove, "ns:remove", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__remove(soap, &soap_tmp_ns__remove, "ns:remove", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rresultr)
		return soap_closesock(soap);
	soap_default_bool(soap, rresultr);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__removeResponse = soap_get_ns__removeResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (rresultr && soap_tmp_ns__removeResponse->rresultr)
		*rresultr = *soap_tmp_ns__removeResponse->rresultr;
	return soap_closesock(soap);
}

int AccountProxy::init(const char *endpoint, const char *soap_action, float balance, char **rresulti)
{	struct soap *soap = this;
	struct ns__init soap_tmp_ns__init;
	struct ns__initResponse *soap_tmp_ns__initResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap->encodingStyle = "";
	soap_tmp_ns__init.balance = balance;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__init(soap, &soap_tmp_ns__init);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__init(soap, &soap_tmp_ns__init, "ns:init", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__init(soap, &soap_tmp_ns__init, "ns:init", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rresulti)
		return soap_closesock(soap);
	*rresulti = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__initResponse = soap_get_ns__initResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (rresulti && soap_tmp_ns__initResponse->rresulti)
		*rresulti = *soap_tmp_ns__initResponse->rresulti;
	return soap_closesock(soap);
}

int AccountProxy::getbalance(const char *endpoint, const char *soap_action, char **rresultb)
{	struct soap *soap = this;
	struct ns__getbalance soap_tmp_ns__getbalance;
	struct ns__getbalanceResponse *soap_tmp_ns__getbalanceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getbalance(soap, &soap_tmp_ns__getbalance);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getbalance(soap, &soap_tmp_ns__getbalance, "ns:getbalance", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getbalance(soap, &soap_tmp_ns__getbalance, "ns:getbalance", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rresultb)
		return soap_closesock(soap);
	*rresultb = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__getbalanceResponse = soap_get_ns__getbalanceResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (rresultb && soap_tmp_ns__getbalanceResponse->rresultb)
		*rresultb = *soap_tmp_ns__getbalanceResponse->rresultb;
	return soap_closesock(soap);
}

int AccountProxy::getstatus(const char *endpoint, const char *soap_action, char **rresultg)
{	struct soap *soap = this;
	struct ns__getstatus soap_tmp_ns__getstatus;
	struct ns__getstatusResponse *soap_tmp_ns__getstatusResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getstatus(soap, &soap_tmp_ns__getstatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getstatus(soap, &soap_tmp_ns__getstatus, "ns:getstatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getstatus(soap, &soap_tmp_ns__getstatus, "ns:getstatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rresultg)
		return soap_closesock(soap);
	*rresultg = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__getstatusResponse = soap_get_ns__getstatusResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (rresultg && soap_tmp_ns__getstatusResponse->rresultg)
		*rresultg = *soap_tmp_ns__getstatusResponse->rresultg;
	return soap_closesock(soap);
}
/* End of client proxy code */
