/* soapBankProxy.h
   Generated by gSOAP 2.8.11 from service.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBankProxy_H
#define soapBankProxy_H
#include "soapH.h"

class SOAP_CMAC BankProxy : public soap
{ public:
	/// Endpoint URL of service 'BankProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	BankProxy();
	/// Construct from another engine state
	BankProxy(const struct soap&);
	/// Constructor with endpoint URL
	BankProxy(const char *url);
	/// Constructor with engine input+output mode control
	BankProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BankProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BankProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BankProxy();
	/// Initializer used by constructors
	virtual	void BankProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Deposit' (returns error code or SOAP_OK)
	virtual	int Deposit(float entry, char **rresult) { return this->Deposit(NULL, NULL, entry, rresult); }
	virtual	int Deposit(const char *endpoint, const char *soap_action, float entry, char **rresult);

	/// Web service operation 'Withdraw' (returns error code or SOAP_OK)
	virtual	int Withdraw(float entry, char **rresult) { return this->Withdraw(NULL, NULL, entry, rresult); }
	virtual	int Withdraw(const char *endpoint, const char *soap_action, float entry, char **rresult);

	/// Web service operation 'initAccounts' (returns error code or SOAP_OK)
	virtual	int initAccounts(int bankid, char **rresult) { return this->initAccounts(NULL, NULL, bankid, rresult); }
	virtual	int initAccounts(const char *endpoint, const char *soap_action, int bankid, char **rresult);

	/// Web service operation 'Transfert' (returns error code or SOAP_OK)
	virtual	int Transfert(float entry, int accountid, char **rresult) { return this->Transfert(NULL, NULL, entry, accountid, rresult); }
	virtual	int Transfert(const char *endpoint, const char *soap_action, float entry, int accountid, char **rresult);

	/// Web service operation 'SwitchAccount' (returns error code or SOAP_OK)
	virtual	int SwitchAccount(int bankid, char **rresult) { return this->SwitchAccount(NULL, NULL, bankid, rresult); }
	virtual	int SwitchAccount(const char *endpoint, const char *soap_action, int bankid, char **rresult);

	/// Web service operation 'GetState' (returns error code or SOAP_OK)
	virtual	int GetState(char **rresult) { return this->GetState(NULL, NULL, rresult); }
	virtual	int GetState(const char *endpoint, const char *soap_action, char **rresult);
};
#endif
